initSidebarItems({"enum":[["Error",""],["Error","Error type of keygen protocol"],["InternalError",""],["ProceedError",""],["ProceedError","Proceeding protocol error"],["SignError",""]],"fn":[["generate_h1_h2_N_tilde",""],["verify",""]],"mod":[["gg20_keygen","High-level keygen protocol implementation"],["gg20_sign","High-level threshold signing protocol implementation"],["gg_2020",""],["rounds",""]],"struct":[["CompletedOfflineStage",""],["DKGState","DKG State tracker"],["KeyGenBroadcastMessage1",""],["KeyGenDecommitMessage1",""],["Keygen","Keygen protocol state machine"],["Keys",""],["LocalKey","Local secret obtained by party after keygen protocol is completed"],["LocalSignature",""],["MultiPartyECDSARounds","State machine structure for performing Keygen, Offline stage and Sign rounds HashMap and BtreeMap keys are encoded formats of (ChainIdType, DKGPayloadKey) Using DKGPayloadKey only will cause collisions when proposals with the same nonce but from different chains are submitted"],["OfflineProtocolMessage",""],["OfflineStage","Offline Stage of GG20 signing"],["Parameters",""],["PartialSignature",""],["PartyPrivate",""],["ProtocolMessage","Protocol message which parties send on wire"],["SharedKeys",""],["SignBroadcastPhase1",""],["SignDecommitPhase1",""],["SignKeys",""],["SignManual","Manual GG20 signing"],["SignatureRecid",""]],"trait":[["RoundBlame",""]]});